<?xml version="1.0"?>
<robot name = "turtlebot4_waffle_pi" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Init colour -->
  <material name="black">
      <color rgba="0.0 0.0 0.0 1.0"/>
  </material>

  <material name="dark">
    <color rgba="0.3 0.3 0.3 1.0"/>
  </material>

  <material name="light_black">
    <color rgba="0.4 0.4 0.4 1.0"/>
  </material>

    <link name="base_footprint"/>

    <link name="base_link">
             <visual>
                <origin xyz="-0.064 0 0.0" rpy="0 0 0"/>
                <geometry>
                    <mesh filename="file://$(find af_obstacle_avoidance_cpp)/model/meshes/bases/waffle_pi_base.stl" scale="0.001 0.001 0.001"/>
                </geometry>
                <material name="light_black"/>
            </visual>

            <collision>
                <origin xyz="-0.064 0 0.047" rpy="0 0 0"/>
                <geometry>
                    <box size="0.266 0.266 0.094"/>
                </geometry>
            </collision>
            
            <inertial>
                <origin xyz="0 0 0" rpy="0 0 0"/>
                <mass value="1.3729096e+00"/>
                <inertia ixx="8.7002718e-03" ixy="-4.7576583e-05" ixz="1.1160499e-04"
                        iyy="8.6195418e-03" iyz="-3.5422299e-06"
                        izz="1.4612727e-02" />
            </inertial>
    </link>


    <link name="imu_link">
      

    </link>



    <link name="base_scan">

        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find af_obstacle_avoidance_cpp)/model/meshes/sensors/lds.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="dark"/>
        </visual>

        <collision>
        <origin xyz="0.0 0 0.0" rpy="0 0 0"/>
        <geometry>
            <cylinder length="0.0315" radius="0.055"/>
        </geometry>
        </collision>

        <inertial>
        <mass value="0.114" />
        <origin xyz="0 0 0" />
        <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                iyy="0.001" iyz="0.0"
                izz="0.001" />
        </inertial>
        

 
    </link>



    <link name="wheel_left_link">
        <visual>
            <origin xyz="0 0 0" rpy="1.57 0 0"/>
            <geometry>
                <mesh filename="file://$(find af_obstacle_avoidance_cpp)/model/meshes/wheels/left_tire.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="dark"/>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder length="0.018" radius="0.033"/>
            </geometry>
            
             
        </collision>

        <inertial>
            <origin xyz="0 0 0" />
            <mass value="2.8498940e-02" />
            <inertia ixx="1.1175580e-05" ixy="-4.2369783e-11" ixz="-5.9381719e-09"
                    iyy="1.1192413e-05" iyz="-1.4400107e-11"
                    izz="2.0712558e-05" />
        </inertial>
    </link>



    <link name="wheel_right_link">
         <visual>
            <origin xyz="0 0 0" rpy="1.57 0 0"/>
            <geometry>
                <mesh filename="file://$(find af_obstacle_avoidance_cpp)/model/meshes/wheels/right_tire.stl" scale="0.001 0.001 0.001"/>
            </geometry>
            <material name="dark"/>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <cylinder length="0.018" radius="0.033"/>
            </geometry>

          
        </collision>

        <inertial>
            <origin xyz="0 0 0" />
            <mass value="2.8498940e-02" />
            <inertia ixx="1.1175580e-05" ixy="-4.2369783e-11" ixz="-5.9381719e-09"
                    iyy="1.1192413e-05" iyz="-1.4400107e-11"
                    izz="2.0712558e-05" />
        </inertial>
    </link>



    <link name="caster_back_left_link">
        <collision>
            <origin xyz="0 0.001 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.030 0.009 0.020"/>
            </geometry>

        </collision>

        <inertial>
        <origin xyz="0 0 0" />
        <mass value="0.005" />
        <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                iyy="0.001" iyz="0.0"
                izz="0.001" />
        </inertial>
    </link>


    <link name="caster_back_right_link">
        <collision>
            <origin xyz="0 0.001 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.030 0.009 0.020"/>
            </geometry>

        </collision>

        <inertial>
        <origin xyz="0 0 0" />
        <mass value="0.005" />
        <inertia ixx="0.001" ixy="0.0" ixz="0.0"
                iyy="0.001" iyz="0.0"
                izz="0.001" />
        </inertial>
    </link>


    <!-- <link name="camera_link"/>

    <link name="camera_rgb_optical_frame">

    </link> -->


    <!-- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%% JOINTS%%%%%%%%%%%%%%%%%%%% -->

    <joint name="base_joint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0 0 0" rpy="0 0.01 0"/>
    </joint>



    <joint name="wheel_left_joint" type="revolute">
        <parent link="base_link"/>
        <child link="wheel_left_link"/>
        <origin xyz="0.0 0.144 0.023" rpy="-1.57 0 0"/>
        <axis xyz="0 0 1"/>
        <limit effort="100" velocity="5" lower="-3.14" upper="3.14"/>   
    </joint>


   <joint name="wheel_right_joint" type="revolute">
        <parent link="base_link"/>
        <child link="wheel_right_link"/>
        <origin xyz="0.0 -0.144 0.023" rpy="-1.57 0 0"/>
        <axis xyz="0 0 1"/>
        <limit effort="100" velocity="5" lower="-3.14" upper="3.14"/>   
    </joint>

   <joint name='caster_back_right_joint' type='fixed'>
        <parent link="base_link"/>
        <child link="caster_back_right_link"/>
    </joint> 

   <joint name='caster_back_left_joint' type='fixed'>
        <parent link="base_link"/>
        <child link="caster_back_left_link"/>
    </joint> 


    <joint name="imu_joint" type="fixed">
        <parent link="base_link"/>
        <child link="imu_link"/>
        <origin xyz="-0.032 0 0.068 " rpy="0 0 0"/>
        <axis xyz="0 0 1"/>
    </joint>

    <joint name="lidar_joint" type="fixed">
        <parent link="base_link"/>
        <child link="base_scan"/>
        <origin xyz="-0.064 0 0.121" rpy="0 0 0"/>
        <axis xyz="0 0 1"/>
    </joint>


    <!-- Publish odom and base_footprint in tf topic  -->
    <gazebo>
        <plugin name="turtlebot3_diff_drive" filename="libgazebo_ros_diff_drive.so">

            <ros>
                <!-- <namespace>/tb3</namespace> -->
            </ros>

            <update_rate>30</update_rate>

            <!-- wheels -->
            <left_joint>wheel_left_joint</left_joint>
            <right_joint>wheel_right_joint</right_joint>

            <!-- kinematics -->
            <wheel_separation>0.287</wheel_separation>
            <wheel_diameter>0.066</wheel_diameter>

            <!-- limits -->
            <max_wheel_torque>200</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>

            <command_topic>cmd_vel</command_topic>

            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <publish_wheel_tf>false</publish_wheel_tf>

            <odometry_topic>odom</odometry_topic>
            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_footprint</robot_base_frame>

        </plugin>
    </gazebo>

    <!-- To publish other frames besides odom and base_footprint to publish their tf transforms in the tf topic  -->
    <gazebo>
        <plugin name="turtlebot3_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
            <ros>
            <!-- <namespace>/tb3</namespace> -->
                <remapping>~/out:=joint_states</remapping>
            </ros>
            <update_rate>30</update_rate>
            <joint_name>wheel_left_joint</joint_name>
            <joint_name>wheel_right_joint</joint_name>
        </plugin>    
    </gazebo>



  <gazebo reference="base_link">
    <material>Gazebo/DarkGrey</material>
  </gazebo>

  <gazebo reference="wheel_left_link">
    <mu1>100000</mu1>
    <mu2>100000</mu2>
    <kp>100000.0</kp>
    <kd>1.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>0.1</maxVel>
    <fdir1>0 0 0</fdir1>
    <material>Gazebo/FlatBlack</material>
  </gazebo>

  <gazebo reference="wheel_right_link">
    <mu1>100000</mu1>
    <mu2>100000</mu2>
    <kp>100000.0</kp>
    <kd>1.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>0.1</maxVel>
    <fdir1>0 0 0</fdir1>
    <material>Gazebo/FlatBlack</material>
  </gazebo>


  <gazebo reference="caster_back_right_link">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <kp>100000.0</kp>
    <kd>1.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>0.01</maxVel>
    <material>Gazebo/White</material>
  </gazebo>

  <gazebo reference="caster_back_left_link">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <kp>100000.0</kp>
    <kd>1.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>0.01</maxVel>
    <material>Gazebo/White</material>
  </gazebo>

 
    <!-- in the scan topic -->
    <gazebo reference="base_scan">
        <material value="Gazebo/FlatBlack"/>
       <sensor name="hls_lfcd_lds" type="ray">
            <always_on>true</always_on>
            <visualize>true</visualize>
            <pose>-0.064 0 0.121 0 0 0</pose>
            <update_rate>5</update_rate>
            <ray>
            <scan>
                <horizontal>
                <samples>360</samples>
                <resolution>1.000000</resolution>
                <min_angle>0.000000</min_angle>
                <max_angle>6.280000</max_angle>
                </horizontal>
            </scan>
            <range>
                <min>0.120000</min>
                <max>3.5</max>
                <resolution>0.015000</resolution>
            </range>
            <noise>
                <type>gaussian</type>
                <mean>0.0</mean>
                <stddev>0.01</stddev>
            </noise>
            </ray>
            <plugin name="turtlebot3_laserscan" filename="libgazebo_ros_ray_sensor.so">
            <ros>
                <remapping>~/out:=scan</remapping>
            </ros>
            <output_type>sensor_msgs/LaserScan</output_type>
            <frame_name>base_scan</frame_name>
            </plugin>
        </sensor>
    </gazebo>


    <!-- linear acceleration on imu topic -->
    <gazebo reference="imu_link">
        <sensor name="tb3_imu" type="imu">
                    <always_on>true</always_on>
                    <update_rate>200</update_rate>
                    <imu>
                    <angular_velocity>
                        <x>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                        </noise>
                        </x>
                        <y>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                        </noise>
                        </y>
                        <z>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                        </noise>
                        </z>
                    </angular_velocity>
                    <linear_acceleration>
                        <x>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                        </noise>
                        </x>
                        <y>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                        </noise>
                        </y>
                        <z>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                        </noise>
                        </z>
                    </linear_acceleration>
                    </imu>
                    <plugin name="turtlebot3_imu" filename="libgazebo_ros_imu_sensor.so">
                    <ros>
                        <!-- <namespace>/tb3</namespace> -->
                        <remapping>~/out:=imu</remapping>
                    </ros>
                    </plugin>
            </sensor>
    </gazebo>


</robot>
